@page  "/Pedido/Escolha"
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager

<select @bind ="UsuarioId" >
    @foreach (var item in Usuarios)
    {
        <option value="@item.Usuario_Id">@item.Nome @item.Sobrenome</option>
    }
</select>
<select @bind = "CupomId">
    <option value=0>Sem desconto</option>
    @foreach (var item in Cupons)
    {
        if (item.Pedido_Id == 0)
        {
            <option value="@item.Cupom_Id">$ @item.Desconto </option>
        }
    }
</select>

<h3>Produtos</h3>

<div class="card-body">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Nome</th>
                <th scope="col">Descricao</th>
                <th scope="col">Preco</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ListaProduto)
            {
            <tr>
                <td>@item.Nome</td>
                <td>@item.Descricao</td>
                <td>@item.Preco</td>
                <td></td>
                <td>
                    <button class="btn btn-success" @onclick="@(() => PedirProduto(item))">Pedir</button>
                </td>
            </tr>
            }        
        </tbody>
    </table>
</div>

<h3>Pedidos</h3>



<div class="card-body">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Nome</th>
                <th scope="col">Descricao</th>
                <th scope="col">Preco</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in listaprodutos)
            {
            <tr>
                <td>@item.Nome</td>
                <td>@item.Descricao</td>
                <td>@item.Preco</td>
                <td>
                    <button class="btn btn-danger" @onclick="@(() => DeleteLista(item))">Deletar</button>
                </td>      
            </tr>
            } 
            <button class="btn btn-primary" @onclick="@(() => Finalizar())">Finalizar pedido</button>  
        </tbody>
    </table>
</div>

@code {

    private List<Produto> ListaProduto = new List<Produto>();

    private List<Produto> listaprodutos = new List<Produto>();    
    private PedidoProduto pedidoproduto = new PedidoProduto();  
    private List<Usuario> Usuarios = new List<Usuario>();
    private int UsuarioId;  
    private List<Cupom> Cupons = new List<Cupom>();
    private int CupomId;       
    private List<PedidoProduto> PedidoProdutos = new List<PedidoProduto>();
    private Pedido pedido = new Pedido();
    private EditContext editContext { get; set;}


    protected override async Task OnInitializedAsync()
    {
        Usuarios = await Http.GetFromJsonAsync<List<Usuario>>("/Usuario/List");
        ListaProduto = await Http.GetFromJsonAsync<List<Produto>>("/Produto/List");
        Cupons = await Http.GetFromJsonAsync<List<Cupom>>("/Cupom/List");

    }
    private void PedirProduto(Produto item)
    {
        //Enviar dados para o Controller no Backend
      //  var pedidos = await Http.PostAsJsonAsync("/PedidoProduto/Create", pedidoproduto);
          if (!(listaprodutos.Contains(item)))
          {
            listaprodutos.Add(item);  
          }
    }

    private void DeleteLista(Produto item)
    {
        //call controller
        if ((listaprodutos.Contains(item)))
          {
            listaprodutos.Remove(item);  
          }
    }
    private async Task Finalizar()
    {   
        // Pedido da pagina
        pedido.Usuario_Id = UsuarioId;    // Passa o Id do usuario           
        await Http.PostAsJsonAsync("/Pedido/Create", pedido); // Criar o pedido no banco
        var ListaPedidos = await Http.GetFromJsonAsync<List<Pedido>>("/Pedido/List"); // lista os pedidos do banco
        pedido = ListaPedidos[ListaPedidos.Count()-1]; // pega o ultimo pedido 


        foreach (var item in listaprodutos) // para cada PedidoProduto passa um pedidoId, produtoId e soma o total do pedido
         {   
            pedidoproduto.Pedido_Id = pedido.Pedido_Id;
            pedidoproduto.Produto_Id = item.Produto_Id;
            pedido.Total += item.Preco;
            await Http.PostAsJsonAsync("/PedidoProduto/Create", pedidoproduto); //cria na pedidoproduto uma nova entrada
        }


        if (CupomId != 0) // avalia se tem cupom 
        {   pedido.Cupom_Id = CupomId; // 
            foreach (var item in Cupons) // busca em cada cupom da lista
            {
                if (item.Cupom_Id == CupomId) // verifica qual foi escolhido 
                {
                    item.Pedido_Id = pedido.Pedido_Id; // faz a ligação 1-1
                    await Http.PutAsJsonAsync($"/Cupom/Update/{CupomId}", item); // atualiza o cupom na lista para não aprecer mais
                    pedido.Total -= item.Desconto; // aplica o desconto
                    return; // sair do foreach para não usar outro cupom
                }
            }
        }

        await Http.PutAsJsonAsync($"/Pedido/Update/{pedido.Pedido_Id}", pedido); // Atualiza o pedido com as informações restantes
                                                                                 // o cupom e o valor total                   
        NavigationManager.NavigateTo("Pedido/Escolha");
        listaprodutos.Clear();  

    }

}
